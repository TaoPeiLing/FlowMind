// 核心规则：保护现有代码结构
RULE "保护现有功能" {
  DESCRIPTION = "在实现新功能时，严禁破坏或改变与该功能无关的现有功能和结构"
  PRIORITY = HIGH
}

// 方案讨论规则
RULE "方案讨论优先" {
  DESCRIPTION = "在开始具体实现之前，需要先进行充分的方案讨论"
  PRIORITY = HIGHEST
  SCENARIOS = [
    "新功能的实现方式存在多种选择",
    "需要对现有功能进行重大调整",
    "涉及到架构或设计模式的改变",
    "可能影响到多个模块或组件"
  ]
  GUIDELINES = [
    "保持独立思考，不盲目附和",
    "提供完整的论据支持自己的观点",
    "尊重不同意见，进行理性讨论",
    "关注方案本身，而不是代码实现细节"
  ]
}

// 头脑风暴规则
RULE "头脑风暴" {
  DESCRIPTION = "在特定情况下，需要先进行头脑风暴"
  PRIORITY = HIGH
  TRIGGER_CONDITIONS = [
    "问题的解决方案不够明确",
    "需要创新性的解决方案",
    "存在多个可能的实现路径",
    "需要权衡不同方案的优劣"
  ]
  PROCESS = [
    "提出多个可能的解决方案",
    "分析每个方案的优缺点",
    "考虑实现成本和维护成本",
    "达成最终的方案共识"
  ]
}

// 智体独立性规则
RULE "保持独立思考" {
  DESCRIPTION = "作为独立的智体，需要保持自己的判断和立场"
  PRIORITY = HIGH
  PRINCIPLES = [
    "基于专业知识提供建议",
    "敢于表达不同意见",
    "提供充分的理由和解释",
    "在讨论中保持专业性和建设性"
  ]
}

// 任务范围控制
RULE "严格任务范围" {
  DESCRIPTION = "严格遵守任务具体范围，不允许擅自扩大修改范围"
  PRIORITY = HIGH
}

// 最小修改原则
RULE "最小修改" {
  DESCRIPTION = "在现有结构内，用最小的修改实现新功能，不要擅自扩散修改范围到其他功能模块"
  PRIORITY = HIGH
}

// 错误案例警示
RULE "模型维护功能案例" {
  DESCRIPTION = "警示：不得为实现新功能而破坏项目结构"
  VIOLATION_EXAMPLES = [
    "修改全局路由",
    "改变布局结构",
    "添加不必要文件"
  ]
}

// 代码定位规则
RULE "正确定位修改位置" {
  DESCRIPTION = "在开始修改之前，必须先确认正确的代码位置"
  PRIORITY = HIGH
  STEPS = [
    "检查功能的实际实现位置",
    "理解现有代码结构",
    "确认修改范围"
  ]
}

// 开发流程规则
RULE "渐进式修改" {
  DESCRIPTION = "在现有代码基础上进行渐进式修改，而不是重新创建"
  PRIORITY = HIGH
  GUIDELINES = [
    "优先在现有文件中修改",
    "保持原有的代码组织方式",
    "避免创建不必要的新文件"
  ]
}

// 代码分析规则
RULE "修改前分析" {
  DESCRIPTION = "在进行修改之前，必须先分析现有代码"
  PRIORITY = HIGH
  CHECKLIST = [
    "查看相关文件的实际内容",
    "理解组件之间的关系",
    "确认功能的实现方式"
  ]
}

// 错误预防规则
RULE "常见错误预防" {
  DESCRIPTION = "预防常见的修改错误"
  COMMON_MISTAKES = [
    "在错误的文件中修改代码",
    "创建重复的组件",
    "忽视现有的实现方式"
  ]
  PREVENTION = [
    "仔细检查文件路径",
    "复用现有组件",
    "遵循项目的代码组织方式"
  ]
}

// 问题定位规则
RULE "问题定位方法" {
  DESCRIPTION = "定位问题时必须从最基础的层面开始检查"
  PRIORITY = HIGHEST
  PRINCIPLES = [
    "从最基础的功能开始检查",
    "不要过早做复杂的假设",
    "验证每个基础组件是否正常工作",
    "收集完整的错误信息再做判断"
  ]
  STEPS = [
    "检查服务是否正常运行",
    "验证基础配置是否正确",
    "确认端口是否正确监听",
    "查看具体的错误日志"
  ]
  LESSONS = [
    "复杂的错误可能源于简单的问题",
    "不要被表面的错误信息误导",
    "先排除基础设施问题",
    "保持冷静和系统性思维"
  ]
}

// 测试开发规则
RULE "测试开发原则" {
  DESCRIPTION = "确保测试开发遵循正确的原则和方法"
  PRIORITY = HIGHEST
  PRINCIPLES = [
    "测试代码应该适应业务代码，而不是为了测试而修改业务代码",
    "深入理解业务代码后再编写测试",
    "使用与业务代码匹配的测试方法",
    "保持业务代码的稳定性和完整性"
  ]
  VIOLATIONS = [
    "为了测试通过而修改业务代码",
    "在不理解业务逻辑的情况下编写测试",
    "忽视现有代码结构而强行测试",
    "随意改变业务组件的属性和行为"
  ]
}

// 测试方法选择规则
RULE "测试方法选择" {
  DESCRIPTION = "选择正确的测试方法和工具"
  PRIORITY = HIGH
  GUIDELINES = [
    "优先使用组件现有的属性和结构",
    "遵循Testing Library的最佳实践",
    "选择最接近用户行为的测试方法",
    "避免过度依赖实现细节"
  ]
  BEST_PRACTICES = [
    "优先使用getByRole和getByLabelText等语义化方法",
    "仅在必要时使用data-testid",
    "测试用户交互而不是实现细节",
    "保持测试的可维护性和可读性"
  ]
}

// 测试开发流程规则
RULE "测试开发流程" {
  DESCRIPTION = "规范测试开发的流程和步骤"
  PRIORITY = HIGH
  STEPS = [
    "完整分析业务代码实现",
    "理解组件的行为和结构",
    "设计合适的测试策略",
    "编写符合现有实现的测试"
  ]
  ERROR_PREVENTION = [
    "避免盲目修改测试代码",
    "防止测试与业务代码不一致",
    "及时发现并报告业务代码问题",
    "不为测试目的修改业务逻辑"
  ]
}

// 测试质量控制规则
RULE "测试质量控制" {
  DESCRIPTION = "确保测试的质量和有效性"
  PRIORITY = HIGH
  QUALITY_CHECKS = [
    "测试是否反映真实用户行为",
    "测试是否符合业务需求",
    "测试是否可维护和可理解",
    "测试是否稳定可靠"
  ]
  REVIEW_POINTS = [
    "检查测试方法的选择是否合适",
    "验证测试是否覆盖关键功能",
    "确认测试是否遵循最佳实践",
    "评估测试的可维护性"
  ]
}

// 问题反馈规则
RULE "测试问题处理" {
  DESCRIPTION = "正确处理测试过程中发现的问题"
  PRIORITY = HIGH
  PROCESS = [
    "记录发现的问题",
    "分析问题的根本原因",
    "通过正确的流程解决问题",
    "避免临时性的修复"
  ]
  GUIDELINES = [
    "区分测试问题和业务问题",
    "采用恰当的解决方案",
    "保持代码质量",
    "及时沟通和反馈"
  ]
}

// 问题本质规则
RULE "问题本质分析" {
  DESCRIPTION = "在解决问题时必须找到问题的本质"
  PRIORITY = HIGHEST
  PRINCIPLES = [
    "不要被表象问题误导",
    "追根溯源找到根本原因",
    "避免过度复杂化简单问题",
    "保持清晰的思维逻辑"
  ]
  STEPS = [
    "收集完整的错误信息",
    "分析错误的实际含义",
    "检查最基本的功能点",
    "验证核心功能是否正常"
  ]
  LESSONS_LEARNED = [
    "CORS错误可能是服务未启动",
    "认证错误可能是路由未配置",
    "数据库错误可能是连接未建立",
    "复杂的错误可能有简单的原因"
  ]
  ANTI_PATTERNS = [
    "过早进行复杂的假设",
    "忽视基础设施问题",
    "盲目修改配置",
    "在未理解问题本质时做出改动"
  ]
}